name: Go

on:
  push:
    branches:
      - main
  workflow_dispatch: {}
  pull_request:
    branches:
      - main

env:
  # Common versions
  GO_VERSION: '1.23'
  GOLANGCI_VERSION: 'v1.62.2'

jobs:

  detect-noop:
    runs-on: ubuntu-latest
    outputs:
      noop: ${{ steps.noop.outputs.should_skip }}
    steps:
      - name: Detect No-op Changes
        id: noop
        uses: fkirc/skip-duplicate-actions@v5.3.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**.md", "**.mdx", "**.png", "**.jpg"]'
          do_not_skip: '["workflow_dispatch", "schedule", "push"]'
          concurrent_skipping: false

  staticcheck:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Setup Go
        uses: actions/setup-go@v5.3.0
        with:
          cache: false
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install StaticCheck
        run: go install honnef.co/go/tools/cmd/staticcheck@2024.1.1

      - name: Static Check
        run: staticcheck -tests=false ./...

  lint:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Setup Go
        uses: actions/setup-go@v5.3.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      # This action uses its own setup-go, which always seems to use the latest
      # stable version of Go. We could run 'make lint' to ensure our desired Go
      # version, but we prefer this action because it leaves 'annotations' (i.e.
      # it comments on PRs to point out linter violations).
      - name: Lint
        uses: golangci/golangci-lint-action@v6.4.0
        with:
          version: ${{ env.GOLANGCI_VERSION }}
          args: --timeout 10m0s --go ${{ env.GO_VERSION }}

  unittest-report:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v5.3.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: unittest
        run: go test ./...
        
      - name: Test
        run: go test -coverprofile=cover.out -coverpkg=./... ./... && go tool cover -html=cover.out -o cover.html && true

      - name: Upload coverage to codecov.io
        uses: codecov/codecov-action@v5.3.1
